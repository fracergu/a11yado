---
import Layout from '../../layouts/Layout.astro'
import Checklist from '../../components/Checklist.astro'
import Header from '../../components/Header.astro'
import Banner from '../../components/Banner.astro'
import OrderedList from '../../components/OrderedList.astro'
import OrderedListItem from '../../components/OrderedListItem.astro'
import CardGrid from '../../components/CardGrid.astro'
import Card from '../../components/Card.astro'
import BannerGrid from '../../components/BannerGrid.astro'
import ToolsSection from '../../components/ToolsSection.astro'

const checklistItems = [
  'Todo el contenido es accesible solo con teclado',
  'El orden de tabulaci√≥n es l√≥gico y predecible',
  'Los enlaces de salto est√°n disponibles',
  'No hay trampas de teclado (keyboard traps)',
  'Los estados de foco son claramente visibles',
  'Los atajos de teclado son configurables',
  'Las funciones no dependen de timing espec√≠fico',
  'Se proporcionan alternativas a gestos complejos',
]

const keyboardTools = [
  {
    name: 'Navegaci√≥n √∫nicamente con Tab',
    description: 'Desconecta el rat√≥n y navega solo con teclado',
  },
  {
    name: 'Screen Reader + Keyboard',
    description: 'Prueba con NVDA, JAWS o VoiceOver',
  },
  {
    name: 'Herramientas de desarrollador',
    description: 'Inspecciona el orden de tabulaci√≥n en DevTools',
  },
  {
    name: 'Extensiones de accesibilidad',
    description: 'axe DevTools, WAVE para detectar problemas',
  },
]
---

<Layout title="Navegaci√≥n por Teclado - a11yado">
  <article>
    <Header
      title="Navegaci√≥n por Teclado"
      description="Asegurar que todas las funciones de tu sitio web sean accesibles usando √∫nicamente el teclado es fundamental para usuarios con discapacidades motoras y visuales."
    />

    <section>
      <h2>¬øPor qu√© es crucial la navegaci√≥n por teclado?</h2>
      <p>
        Muchos usuarios dependen exclusivamente del teclado para navegar en la
        web: personas con discapacidades visuales que usan lectores de pantalla,
        usuarios con problemas motores que no pueden usar un rat√≥n, y personas
        que simplemente prefieren la eficiencia del teclado.
      </p>

      <Banner title="üéØ Principio fundamental" variant="info">
        <p>
          <strong
            >Si algo se puede hacer con rat√≥n, debe poder hacerse con teclado.</strong
          > El teclado es el denominador com√∫n de accesibilidad: funciona con lectores
          de pantalla, dispositivos de entrada alternativos, y software de reconocimiento
          de voz.
        </p>
      </Banner>

      <BannerGrid columns="2">
        <Banner title="üìä Datos importantes" variant="info">
          <ul>
            <li>
              <strong>15-20%</strong> de usuarios usan alg√∫n tipo de tecnolog√≠a asistiva
            </li>
            <li>
              <strong>285 millones</strong> de personas tienen discapacidad visual
              a nivel mundial
            </li>
            <li>
              <strong>Todos</strong> los lectores de pantalla dependen de navegaci√≥n
              por teclado
            </li>
          </ul>
        </Banner>
        <Banner title="‚öñÔ∏è Requisitos legales" variant="warning">
          <p>
            <strong
              ><a
                href="https://www.w3.org/WAI/WCAG22/Understanding/keyboard.html"
                target="_blank"
                rel="noopener">WCAG 2.2.1</a
              ></strong
            > (Nivel A) requiere que toda la funcionalidad sea operable por teclado.
            No es opcional: es un requisito b√°sico de accesibilidad.
          </p>
        </Banner>
      </BannerGrid>
    </section>

    <section>
      <h2>Los 4 criterios oficiales de WCAG 2.2</h2>

      <OrderedList>
        <OrderedListItem number={1} title="WCAG 2.1.1: Teclado (Nivel A)">
          <p>
            <strong
              >Toda la funcionalidad debe ser operable a trav√©s de una interfaz
              de teclado</strong
            >, excepto cuando la funci√≥n subyacente requiera entrada que dependa
            del recorrido del movimiento del usuario y no solo de los puntos
            finales.
          </p>
          <p>
            üìö <strong>Referencia oficial:</strong>
            <a
              href="https://www.w3.org/WAI/WCAG22/Understanding/keyboard.html"
              target="_blank"
              rel="noopener"
            >
              WCAG 2.2 - 2.1.1 Keyboard
            </a>
          </p>

          <CardGrid columns="2" gap="lg">
            <Card
              title="‚úÖ Funciones que DEBEN ser accesibles por teclado"
              variant="success"
              borderAccent
            >
              <ul>
                <li>Navegaci√≥n por men√∫s</li>
                <li>Llenar formularios</li>
                <li>Activar botones y enlaces</li>
                <li>Controlar reproductores de video</li>
                <li>Usar calendarios y selectores</li>
                <li>Arrastrar y soltar (con alternativa)</li>
                <li>Cambiar pesta√±as</li>
                <li>Cerrar modales</li>
              </ul>
            </Card>

            <Card
              title="‚ö†Ô∏è Excepciones permitidas"
              variant="warning"
              borderAccent
            >
              <ul>
                <li>Dibujo a mano alzada</li>
                <li>Pintura digital</li>
                <li>Escritura a mano</li>
                <li>Simuladores que requieren gestos</li>
              </ul>
              <p class="exception-note">
                <strong>Nota:</strong> La excepci√≥n es para la funci√≥n subyacente,
                no para la t√©cnica de entrada. Escribir texto no requiere un recorrido
                espec√≠fico, aunque la escritura a mano s√≠.
              </p>
            </Card>
          </CardGrid>

          <Banner
            title="Interfaz de email accesible por teclado"
            variant="concept"
            subtitle="Pru√©balo: Presiona Tab para navegar por todos los elementos. Usa Enter o Espacio para activar botones."
          >
            <div class="keyboard-demo" id="email-demo">
              <div class="email-toolbar">
                <button class="email-btn" tabindex="1">üìß Nuevo</button>
                <button class="email-btn" tabindex="2">‚Ü©Ô∏è Responder</button>
                <button class="email-btn" tabindex="3">‚Ü™Ô∏è Reenviar</button>
                <button class="email-btn" tabindex="4">üóëÔ∏è Eliminar</button>
              </div>
              <div class="email-list">
                <div class="email-item" tabindex="5">
                  <strong>Reuni√≥n proyecto</strong> - Por favor confirma...
                </div>
                <div class="email-item" tabindex="6">
                  <strong>Actualizaci√≥n sistema</strong> - El mantenimiento...
                </div>
              </div>
            </div>
          </Banner>
        </OrderedListItem>

        <OrderedListItem
          number={2}
          title="WCAG 2.1.2: Sin trampa de teclado (Nivel A)"
        >
          <p>
            <strong
              >Si el foco puede moverse a un componente usando el teclado,
              entonces debe poder salir de ese componente usando solo el
              teclado.</strong
            > Si se requiere m√°s que teclas de flecha o Tab, se debe informar al
            usuario.
          </p>
          <p>
            üìö <strong>Referencia oficial:</strong>
            <a
              href="https://www.w3.org/WAI/WCAG22/Understanding/no-keyboard-trap.html"
              target="_blank"
              rel="noopener"
            >
              WCAG 2.2 - 2.1.2 No Keyboard Trap
            </a>
          </p>

          <CardGrid columns="2" gap="lg">
            <Card title="Modal problem√°tico" variant="danger" borderAccent>
              <div class="modal-overlay">
                <div class="modal-problematic">
                  <p>Este modal NO captura el foco correctamente:</p>
                  <input type="text" placeholder="Campo dentro del modal" />
                  <button>Aceptar</button>
                  <p class="trap-explanation">
                    ‚ùå El Tab puede salir del modal y ir al contenido de atr√°s,
                    creando confusi√≥n
                  </p>
                </div>
              </div>
            </Card>

            <Card title="Modal accesible" variant="success" borderAccent>
              <div class="modal-overlay">
                <div class="modal-accessible" id="accessible-modal">
                  <p>Este modal S√ç maneja el foco correctamente:</p>
                  <input
                    type="text"
                    placeholder="Campo dentro del modal"
                    id="modal-input"
                  />
                  <div class="modal-actions">
                    <button id="modal-cancel">Cancelar</button>
                    <button id="modal-accept">Aceptar</button>
                  </div>
                  <p class="safe-explanation">
                    ‚úÖ El foco se mantiene dentro del modal. Escape lo cierra y
                    devuelve el foco al bot√≥n que lo abri√≥.
                  </p>
                </div>
              </div>
            </Card>
          </CardGrid>

          <Banner title="üíª Implementaci√≥n t√©cnica" variant="info">
            <h4>C√≥mo evitar trampas de teclado en modales:</h4>
            <pre><code>{`// Capturar foco en modal
const modal = document.querySelector('.modal');
const focusableElements = modal.querySelectorAll(
  'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
);
const firstElement = focusableElements[0];
const lastElement = focusableElements[focusableElements.length - 1];

// Manejar Tab en el √∫ltimo elemento
lastElement.addEventListener('keydown', (e) => {
  if (e.key === 'Tab' && !e.shiftKey) {
    e.preventDefault();
    firstElement.focus(); // Volver al primer elemento
  }
});

// Manejar Shift+Tab en el primer elemento
firstElement.addEventListener('keydown', (e) => {
  if (e.key === 'Tab' && e.shiftKey) {
    e.preventDefault();
    lastElement.focus(); // Ir al √∫ltimo elemento
  }
});

// Cerrar con Escape
modal.addEventListener('keydown', (e) => {
  if (e.key === 'Escape') {
    closeModal();
  }
});`}</code></pre>
          </Banner>
        </OrderedListItem>

        <OrderedListItem
          number={3}
          title="WCAG 2.1.3: Teclado (Sin excepci√≥n) - Nivel AAA"
        >
          <p>
            Versi√≥n m√°s estricta del criterio 2.1.1 que <strong
              >no permite excepciones</strong
            >. Todo debe ser operable por teclado, sin importar la complejidad.
          </p>
          <p>
            üìö <strong>Referencia oficial:</strong>
            <a
              href="https://www.w3.org/WAI/WCAG22/Understanding/keyboard-no-exception.html"
              target="_blank"
              rel="noopener"
            >
              WCAG 2.2 - 2.1.3 Keyboard (No Exception)
            </a>
          </p>

          <Banner title="üéØ Nivel AAA vs Nivel A" variant="info">
            <CardGrid columns="2" gap="lg">
              <Card title="WCAG 2.1.1 (Nivel A)" variant="info" borderAccent>
                <ul>
                  <li>‚úÖ Permite excepciones para dibujo libre</li>
                  <li>‚úÖ Permite excepciones para gestos complejos</li>
                  <li>‚úÖ Requerido para cumplimiento b√°sico</li>
                </ul>
              </Card>
              <Card title="WCAG 2.1.3 (Nivel AAA)" variant="info" borderAccent>
                <ul>
                  <li>‚ùå No permite excepciones</li>
                  <li>‚úÖ Todo debe tener alternativa de teclado</li>
                  <li>‚ö° Est√°ndar de excelencia</li>
                </ul>
              </Card>
            </CardGrid>
          </Banner>
        </OrderedListItem>

        <OrderedListItem
          number={4}
          title="WCAG 2.1.4: Atajos de teclas (Nivel A)"
        >
          <p>
            Si implementas <strong
              >atajos de teclado usando solo caracteres</strong
            > (letras, n√∫meros, s√≠mbolos), los usuarios deben poder:
          </p>
          <p>
            üìö <strong>Referencia oficial:</strong>
            <a
              href="https://www.w3.org/WAI/WCAG22/Understanding/character-key-shortcuts.html"
              target="_blank"
              rel="noopener"
            >
              WCAG 2.2 - 2.1.4 Character Key Shortcuts
            </a>
          </p>

          <CardGrid columns="3" gap="lg">
            <Card title="üîß Desactivarlos" variant="info" borderAccent>
              <p>
                Permitir que el usuario desactive completamente los atajos de
                caracteres.
              </p>
            </Card>
            <Card title="‚å®Ô∏è Remapearlos" variant="info" borderAccent>
              <p>
                Cambiar el atajo para incluir teclas modificadoras (Ctrl, Alt,
                Cmd).
              </p>
            </Card>
            <Card title="üéØ Solo cuando tenga foco" variant="info" borderAccent>
              <p>
                Los atajos solo funcionan cuando el componente relevante tiene
                el foco.
              </p>
            </Card>
          </CardGrid>

          <Banner title="‚ö†Ô∏è ¬øPor qu√© es importante?" variant="warning">
            <p>
              Los usuarios de software de reconocimiento de voz pueden activar
              accidentalmente atajos al dictar texto. Si dices "eliminar
              archivo" y hay un atajo "D" para eliminar, podr√≠as borrar
              contenido sin querer.
            </p>
          </Banner>
        </OrderedListItem>
      </OrderedList>
    </section>

    <section id="techniques-section">
      <h2>T√©cnicas esenciales para navegaci√≥n por teclado</h2>

      <OrderedList>
        <OrderedListItem number={1} title="Orden de tabulaci√≥n l√≥gico">
          <p>
            El orden en que los elementos reciben foco debe seguir el flujo
            visual y l√≥gico de la p√°gina.
          </p>

          <CardGrid columns="2" gap="lg">
            <Card
              title="‚ùå Orden confuso"
              subtitle="El orden de tabulaci√≥n salta por la interfaz de manera impredecible"
              variant="danger"
              borderAccent
              highContrast
            >
              <div class="tab-order-bad" id="bad-tab-demo">
                <button class="tab-demo" tabindex="1" data-demo-order="1"
                  >Bot√≥n A</button
                >
                <button class="tab-demo" tabindex="5" data-demo-order="5"
                  >Bot√≥n E</button
                >
                <button class="tab-demo" tabindex="2" data-demo-order="2"
                  >Bot√≥n B</button
                >
                <button class="tab-demo" tabindex="4" data-demo-order="4"
                  >Bot√≥n D</button
                >
                <button class="tab-demo" tabindex="3" data-demo-order="3"
                  >Bot√≥n C</button
                >
              </div>
            </Card>

            <Card
              title="‚úÖ Orden l√≥gico"
              subtitle="El orden sigue el flujo natural de lectura: izquierda a derecha, arriba a abajo"
              variant="success"
              borderAccent
              highContrast
            >
              <div class="tab-order-good">
                <button class="tab-demo">Bot√≥n A</button>
                <button class="tab-demo">Bot√≥n B</button>
                <button class="tab-demo">Bot√≥n C</button>
                <button class="tab-demo">Bot√≥n D</button>
                <button class="tab-demo">Bot√≥n E</button>
              </div>
            </Card>
          </CardGrid>

          <Banner title="‚ö° Regla de oro" variant="tip">
            <p>
              <strong>Nunca uses tabindex positivos</strong> (tabindex="1", tabindex="2",
              etc.). En su lugar, organiza el HTML en el orden correcto y usa tabindex="0"
              para elementos que naturalmente no reciben foco, o tabindex="-1" para
              remover elementos del orden de tabulaci√≥n.
            </p>
          </Banner>
        </OrderedListItem>

        <OrderedListItem number={2} title="Enlaces de salto (Skip Links)">
          <p>
            Proporciona enlaces que permitan a los usuarios saltarse bloques
            repetitivos de contenido, como navegaci√≥n principal.
          </p>
          <Banner title="üíª Implementaci√≥n de skip links (HTML)" variant="info">
            <pre><code>{`<!-- Ejemplo de skip link -->
<a href="#main-content" class="skip-link">
  Saltar al contenido principal
</a>

<!-- Contenido de navegaci√≥n y otros elementos -->
...

<!-- Contenido principal al que salta el enlace -->
<main id="main-content">
  <h1>T√≠tulo del contenido principal</h1>
</main>`}</code></pre>
          </Banner>
        </OrderedListItem>

        <OrderedListItem number={3} title="Indicadores de foco visibles">
          <p>
            Los usuarios deben poder ver claramente qu√© elemento tiene el foco
            en todo momento.
          </p>

          <CardGrid columns="2" gap="lg">
            <Card
              title="‚ùå Foco invisible"
              subtitle="Usuarios de teclado no saben d√≥nde est√°n navegando"
              variant="danger"
              borderAccent
              highContrast
            >
              <div class="focus-demo">
                <button class="no-focus-indicator">Sin indicador de foco</button
                >
                <input
                  type="text"
                  class="no-focus-indicator"
                  placeholder="Campo sin foco visible"
                />
                <a href="#" class="no-focus-indicator">Enlace sin foco</a>
              </div>
            </Card>

            <Card
              title="‚úÖ Foco claramente visible"
              subtitle="El foco es claramente visible con borde de alto contraste"
              variant="success"
              borderAccent
              highContrast
            >
              <div class="focus-demo">
                <button class="clear-focus-indicator"
                  >Con indicador claro</button
                >
                <input
                  type="text"
                  class="clear-focus-indicator"
                  placeholder="Campo con foco visible"
                />
                <a href="#" class="clear-focus-indicator">Enlace con foco</a>
              </div>
            </Card>
          </CardGrid>
        </OrderedListItem>

        <OrderedListItem number={4} title="Alternativas a gestos t√°ctiles">
          <p>
            Toda funcionalidad que use gestos t√°ctiles debe tener una
            alternativa operable por teclado.
          </p>

          <CardGrid columns="2" gap="lg">
            <Card
              title="‚ùå Solo gestos"
              subtitle="No hay forma de navegar con teclado"
              variant="danger"
              borderAccent
            >
              <div class="swipe-area">
                <p>üëà Desliza para ver m√°s</p>
                <div class="carousel-content">
                  <div class="slide active">Slide 1</div>
                  <div class="slide">Slide 2</div>
                  <div class="slide">Slide 3</div>
                </div>
              </div>
            </Card>

            <Card
              title="‚úÖ Gestos + Teclado"
              subtitle="Botones y teclas de flecha para navegaci√≥n por teclado"
              variant="success"
              borderAccent
            >
              <div class="accessible-carousel">
                <button class="carousel-btn prev" onclick="previousSlide()"
                  >‚Üê Anterior</button
                >
                <div class="carousel-content">
                  <div class="slide active" tabindex="0" id="current-slide">
                    Slide 1 de 3
                  </div>
                </div>
                <button class="carousel-btn next" onclick="nextSlide()"
                  >Siguiente ‚Üí</button
                >
              </div>
              <p class="controls-info">
                ‚å®Ô∏è Tambi√©n usar flechas izquierda/derecha cuando el slide tenga
                foco
              </p>
            </Card>
          </CardGrid>
        </OrderedListItem>
      </OrderedList>
    </section>

    <section>
      <h2>Patrones de navegaci√≥n comunes</h2>

      <BannerGrid columns="2">
        <Banner title="üçî Men√∫s hamburguesa" variant="concept">
          <div class="hamburger-demo">
            <button
              class="hamburger-btn"
              aria-label="Abrir men√∫ de navegaci√≥n"
              aria-expanded="false"
              onclick="toggleHamburgerMenu()"
            >
              ‚ò∞
            </button>
            <nav class="mobile-nav" id="hamburger-nav" hidden>
              <ul>
                <li>
                  <a href="#" onclick="closeHamburgerMenu(); return false;"
                    >Inicio</a
                  >
                </li>
                <li>
                  <a href="#" onclick="closeHamburgerMenu(); return false;"
                    >Acerca de</a
                  >
                </li>
                <li>
                  <a href="#" onclick="closeHamburgerMenu(); return false;"
                    >Contacto</a
                  >
                </li>
              </ul>
            </nav>
          </div>
          <div class="pattern-requirements">
            <h4>Requisitos de accesibilidad:</h4>
            <ul>
              <li>‚úÖ Button con aria-label descriptivo</li>
              <li>‚úÖ Foco se mueve al primer enlace del men√∫</li>
              <li>‚úÖ Escape cierra el men√∫</li>
              <li>‚úÖ Foco retorna al bot√≥n hamburguesa</li>
            </ul>
          </div>
        </Banner>

        <Banner title="üóÇÔ∏è Pesta√±as (Tabs)" variant="concept">
          <div class="tabs-demo">
            <div class="tab-list" role="tablist">
              <button
                role="tab"
                aria-selected="true"
                class="tab-active"
                id="tab-1"
                onclick="selectTab(1)"
              >
                Pesta√±a 1
              </button>
              <button
                role="tab"
                aria-selected="false"
                id="tab-2"
                onclick="selectTab(2)">Pesta√±a 2</button
              >
              <button
                role="tab"
                aria-selected="false"
                id="tab-3"
                onclick="selectTab(3)">Pesta√±a 3</button
              >
            </div>
            <div class="tab-panel" role="tabpanel" id="panel-1">
              <p>Contenido de la pesta√±a 1</p>
            </div>
            <div class="tab-panel" role="tabpanel" id="panel-2" hidden>
              <p>Contenido de la pesta√±a 2</p>
            </div>
            <div class="tab-panel" role="tabpanel" id="panel-3" hidden>
              <p>Contenido de la pesta√±a 3</p>
            </div>
          </div>
          <div class="pattern-requirements">
            <h4>Requisitos de accesibilidad:</h4>
            <ul>
              <li>‚úÖ Flechas izquierda/derecha cambian pesta√±as</li>
              <li>‚úÖ Home/End van a primera/√∫ltima pesta√±a</li>
              <li>‚úÖ Enter o Espacio activa la pesta√±a</li>
              <li>‚úÖ Solo la pesta√±a activa est√° en tab order</li>
            </ul>
          </div>
        </Banner>
      </BannerGrid>
    </section>

    <section>
      <h2>Pruebas de navegaci√≥n por teclado</h2>

      <Banner title="üß™ Protocolo de pruebas" variant="concept">
        <CardGrid columns="2" gap="lg">
          <Card title="üìã Pasos b√°sicos" variant="info" borderAccent>
            <ol>
              <li><strong>Desconecta el rat√≥n</strong> o no lo uses</li>
              <li><strong>Ctrl+L</strong> para ir a la barra de direcciones</li>
              <li><strong>Tab</strong> para navegar adelante</li>
              <li><strong>Shift+Tab</strong> para navegar atr√°s</li>
            </ol>
          </Card>

          <Card title="‚ö° Pruebas de activaci√≥n" variant="info" borderAccent>
            <ul>
              <li><strong>Enter/Espacio:</strong> Activar elementos</li>
              <li><strong>Escape:</strong> Cerrar modales/men√∫s</li>
              <li><strong>Flechas:</strong> Navegar en componentes</li>
              <li><strong>Home/End:</strong> Primer/√∫ltimo elemento</li>
            </ul>
          </Card>
        </CardGrid>
      </Banner>

      <BannerGrid columns="3">
        <Banner title="‚å®Ô∏è Teclas principales" variant="info">
          <ul>
            <li><strong>Tab:</strong> Siguiente elemento</li>
            <li><strong>Shift+Tab:</strong> Elemento anterior</li>
            <li><strong>Enter:</strong> Activar enlaces/botones</li>
            <li><strong>Espacio:</strong> Activar botones/checkboxes</li>
            <li><strong>Escape:</strong> Cerrar/cancelar</li>
            <li><strong>Flechas:</strong> Navegar dentro de componentes</li>
          </ul>
        </Banner>

        <Banner title="üéØ Qu√© verificar" variant="warning">
          <ul>
            <li>¬øEl foco es siempre visible?</li>
            <li>¬øEl orden de tabulaci√≥n es l√≥gico?</li>
            <li>¬øNo hay trampas de teclado?</li>
            <li>¬øTodos los elementos interactivos son accesibles?</li>
            <li>¬øLos estados se comunican claramente?</li>
          </ul>
        </Banner>

        <Banner title="üêõ Problemas comunes" variant="bad">
          <ul>
            <li>Elementos que no reciben foco</li>
            <li>Foco que se pierde o salta</li>
            <li>Modales que no capturan el foco</li>
            <li>Men√∫s que no se pueden cerrar</li>
            <li>Formularios que no se pueden enviar</li>
          </ul>
        </Banner>
      </BannerGrid>
    </section>

    <Checklist
      title="‚úÖ Lista de verificaci√≥n final"
      items={checklistItems}
      variant="success"
    />

    <ToolsSection title="Herramientas de prueba" tools={keyboardTools}>
      <Banner title="üõ†Ô∏è Herramientas adicionales recomendadas" variant="info">
        <ul>
          <li>
            <strong>Navegadores:</strong> Todos los navegadores principales tienen
            buenas herramientas de desarrollador para inspeccionar el orden de tabulaci√≥n
          </li>
          <li>
            <strong>Screen readers:</strong> NVDA (gratis), JAWS (Windows), VoiceOver
            (Mac), TalkBack (Android)
          </li>
          <li>
            <strong>Extensiones:</strong> axe DevTools, Lighthouse, WAVE Web Accessibility
            Evaluator
          </li>
          <li>
            <strong>Automated testing:</strong> axe-core, jest-axe, cypress-axe para
            pruebas automatizadas
          </li>
        </ul>
      </Banner>
    </ToolsSection>
  </article>
</Layout>

<style lang="scss">
  article {
    max-width: 90ch;
  }

  .exception-note {
    font-style: italic;
    margin-top: var(--spacing-sm);
    font-size: 0.875rem;
    color: var(--color-text-light);
  }

  /* Interface simulation wrapper */
  .interface-simulation {
    background-color: white;
    border: 1px solid var(--color-border);
    border-radius: 6px;
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-md);
  }

  .pattern-requirements {
    margin-top: var(--spacing-md);
    h4 {
      margin: 0 0 var(--spacing-sm) 0;
      color: var(--color-text);
      font-size: 0.9rem;
    }

    ul {
      margin: 0;
      font-size: 0.875rem;
    }
  }

  /* Email interface demo */
  .keyboard-demo {
    margin: var(--spacing-md) 0;
    padding: var(--spacing-md);
    background-color: white;
  }

  .email-toolbar {
    display: flex;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
    padding-bottom: var(--spacing-sm);
    border-bottom: 1px solid var(--color-border);
  }

  .email-btn {
    background-color: var(--color-primary);
    color: white;
    border: none;
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;

    &:focus {
      outline: 2px solid #000;
      outline-offset: 2px;
    }

    &:hover {
      background-color: #1e40af;
    }
  }

  .email-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
  }

  .email-item {
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    cursor: pointer;
    background-color: white;

    &:focus {
      outline: 2px solid var(--color-primary);
      outline-offset: 1px;
      background-color: #f0f9ff;
    }

    &:hover {
      background-color: #f9fafb;
    }
  }

  /* Modal demos */
  .modal-overlay {
    position: relative;
    background-color: rgba(0, 0, 0, 0.1);
    padding: var(--spacing-lg);
    border-radius: 6px;
    min-height: 150px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-problematic,
  .modal-accessible {
    background-color: white;
    padding: var(--spacing-lg);
    border-radius: 6px;
    border: 1px solid var(--color-border);
    max-width: 300px;
    text-align: center;
  }

  .modal-actions {
    display: flex;
    gap: var(--spacing-sm);
    justify-content: center;
    margin-top: var(--spacing-md);
  }

  .trap-explanation {
    font-size: 0.875rem;
    margin-top: var(--spacing-md);
    padding: var(--spacing-sm);
    border-radius: 4px;
    background-color: #fef2f2;
    color: #991b1b;
  }

  .safe-explanation {
    font-size: 0.875rem;
    margin-top: var(--spacing-md);
    padding: var(--spacing-sm);
    border-radius: 4px;
    background-color: #f0fdf4;
    color: #166534;
  }

  /* Tab order demos */
  .tab-order-bad,
  .tab-order-good {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-sm);
    margin: var(--spacing-md) 0;
  }

  .tab-demo {
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    background-color: var(--color-surface);
    cursor: pointer;
    font-size: 0.875rem;

    &:focus {
      outline: 2px solid var(--color-primary);
      outline-offset: 1px;
    }
  }

  .demo-nav {
    ul {
      display: flex;
      list-style: none;
      padding: var(--spacing-sm);
      margin: 0;
      gap: var(--spacing-md);
      background-color: var(--color-surface);
      border-radius: 4px;
    }

    a {
      color: var(--color-primary);
      text-decoration: none;
      padding: var(--spacing-xs);

      &:focus {
        outline: 2px solid var(--color-primary);
        outline-offset: 1px;
      }
    }
  }

  /* Focus indicators */
  .focus-demo {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    margin: var(--spacing-md) 0;
  }

  .no-focus-indicator {
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    background-color: var(--color-surface);

    &:focus {
      outline: none; /* Malo: sin indicador de foco */
    }
  }

  .clear-focus-indicator {
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    background-color: var(--color-surface);

    &:focus {
      outline: 3px solid #000;
      outline-offset: 2px;
    }
  }

  /* Gesture demos */
  .swipe-area {
    text-align: center;
    padding: var(--spacing-lg);
    background-color: var(--color-surface);
    border-radius: 6px;
    border: 1px solid var(--color-border);
  }

  .accessible-carousel {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    background-color: var(--color-surface);
    padding: var(--spacing-md);
    border-radius: 6px;
    border: 1px solid var(--color-border);
  }

  .carousel-btn {
    background-color: var(--color-primary);
    color: white;
    border: none;
    padding: var(--spacing-sm);
    border-radius: 4px;
    cursor: pointer;

    &:focus {
      outline: 2px solid #000;
      outline-offset: 2px;
    }

    &:hover {
      background-color: #1e40af;
    }

    &:disabled {
      background-color: #9ca3af;
      cursor: not-allowed;
    }
  }

  .carousel-content {
    flex: 1;
    text-align: center;
  }

  .slide {
    padding: var(--spacing-md);
    background-color: white;
    border: 1px solid var(--color-border);
    border-radius: 4px;

    &:focus {
      outline: 2px solid var(--color-primary);
      outline-offset: 1px;
    }
  }

  .controls-info {
    font-size: 0.875rem;
    color: var(--color-text-light);
    margin-top: var(--spacing-xs) !important;
    text-align: center;
  }

  /* Navigation patterns */
  .hamburger-demo {
    margin: var(--spacing-md) 0;
  }

  .hamburger-btn {
    background-color: var(--color-primary);
    color: white;
    border: none;
    padding: var(--spacing-sm);
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.2rem;

    &:focus {
      outline: 2px solid #000;
      outline-offset: 2px;
    }
  }

  .mobile-nav {
    margin-top: var(--spacing-sm);

    ul {
      list-style: none;
      padding: 0;
      margin: 0;
      background-color: var(--color-surface);
      border: 1px solid var(--color-border);
      border-radius: 4px;
    }

    li {
      border-bottom: 1px solid var(--color-border);

      &:last-child {
        border-bottom: none;
      }
    }

    a {
      display: block;
      padding: var(--spacing-sm) var(--spacing-md);
      color: var(--color-text);
      text-decoration: none;

      &:focus {
        outline: 2px solid var(--color-primary);
        outline-offset: -2px;
        background-color: #f0f9ff;
      }

      &:hover {
        background-color: var(--color-surface);
      }
    }
  }

  .tabs-demo {
    border: 1px solid var(--color-border);
    border-radius: 6px;
    overflow: hidden;
  }

  .tab-list {
    display: flex;
    background-color: var(--color-surface);

    button {
      flex: 1;
      padding: var(--spacing-sm) var(--spacing-md);
      border: none;
      border-bottom: 2px solid transparent;
      background-color: transparent;
      cursor: pointer;

      &[aria-selected='true'] {
        background-color: white;
        border-bottom-color: var(--color-primary);
        font-weight: 600;
      }

      &:focus {
        outline: 2px solid var(--color-primary);
        outline-offset: -2px;
      }
    }
  }

  .tab-panel {
    padding: var(--spacing-md);
    background-color: white;
  }

  /* Code blocks */
  pre {
    background-color: #1f2937;
    color: #f9fafb;
    padding: var(--spacing-md);
    border-radius: 6px;
    overflow-x: auto;
    margin: var(--spacing-md) 0;
  }

  code {
    font-family: 'Fira Code', 'Consolas', 'Monaco', monospace;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .tab-order-bad,
    .tab-order-good {
      grid-template-columns: 1fr;
    }

    .accessible-carousel {
      flex-direction: column;
      gap: var(--spacing-md);
    }

    .email-toolbar {
      flex-wrap: wrap;
    }

    .tab-list {
      flex-direction: column;
    }
  }
</style>

<script>
  // Make functions global for onclick handlers
  declare global {
    interface Window {
      toggleHamburgerMenu: () => void
      closeHamburgerMenu: () => void
      previousSlide: () => void
      nextSlide: () => void
      selectTab: (tabNumber: number) => void
    }
  }

  // Carousel functionality
  let currentSlideIndex = 1
  const totalSlides = 3

  function updateSlide() {
    const slideElement = document.getElementById('current-slide')
    if (slideElement) {
      slideElement.textContent = `Slide ${currentSlideIndex} de ${totalSlides}`
    }

    // Update button states
    const prevBtn = document.querySelector(
      '.carousel-btn.prev'
    ) as HTMLButtonElement
    const nextBtn = document.querySelector(
      '.carousel-btn.next'
    ) as HTMLButtonElement

    if (prevBtn) prevBtn.disabled = currentSlideIndex === 1
    if (nextBtn) nextBtn.disabled = currentSlideIndex === totalSlides
  }

  function previousSlide() {
    if (currentSlideIndex > 1) {
      currentSlideIndex--
      updateSlide()
    }
  }

  function nextSlide() {
    if (currentSlideIndex < totalSlides) {
      currentSlideIndex++
      updateSlide()
    }
  }

  // Make carousel functions global
  window.previousSlide = previousSlide
  window.nextSlide = nextSlide

  // Handle keyboard navigation for carousel
  document.addEventListener('keydown', (e) => {
    const currentSlide = document.getElementById('current-slide')
    if (document.activeElement === currentSlide) {
      if (e.key === 'ArrowLeft') {
        e.preventDefault()
        previousSlide()
      } else if (e.key === 'ArrowRight') {
        e.preventDefault()
        nextSlide()
      }
    }
  })

  // Hamburger menu functionality
  function toggleHamburgerMenu() {
    const nav = document.getElementById('hamburger-nav')
    const btn = document.querySelector('.hamburger-btn') as HTMLButtonElement

    if (nav && btn) {
      const isHidden = nav.hasAttribute('hidden')

      if (isHidden) {
        // Open menu
        nav.removeAttribute('hidden')
        btn.setAttribute('aria-expanded', 'true')
        btn.textContent = '‚úï' // Change to close icon

        // Focus first link after a small delay to ensure menu is visible
        const firstLink = nav.querySelector('a') as HTMLAnchorElement
        if (firstLink) {
          setTimeout(() => firstLink.focus(), 100)
        }

        // Trap focus within the menu
        trapFocusInMenu(nav, btn)
      } else {
        closeHamburgerMenu()
      }
    }
  }

  function closeHamburgerMenu() {
    const nav = document.getElementById('hamburger-nav')
    const btn = document.querySelector('.hamburger-btn') as HTMLButtonElement

    if (nav && btn) {
      nav.setAttribute('hidden', '')
      btn.setAttribute('aria-expanded', 'false')
      btn.textContent = '‚ò∞' // Change back to hamburger icon
      btn.focus() // Return focus to button

      // Remove event listeners for focus trapping
      removeFocusTrap()
    }
  }

  // Make hamburger functions global
  window.toggleHamburgerMenu = toggleHamburgerMenu
  window.closeHamburgerMenu = closeHamburgerMenu

  let focusTrapHandler: ((e: KeyboardEvent) => void) | null = null

  function trapFocusInMenu(nav: HTMLElement, btn: HTMLButtonElement) {
    const focusableElements = nav.querySelectorAll(
      'a, button, [tabindex]:not([tabindex="-1"])'
    ) as NodeListOf<HTMLElement>
    const firstElement = focusableElements[0]
    const lastElement = focusableElements[focusableElements.length - 1]

    focusTrapHandler = (e: KeyboardEvent) => {
      if (e.key === 'Tab') {
        if (e.shiftKey) {
          // Shift + Tab: going backwards
          if (document.activeElement === firstElement) {
            e.preventDefault()
            lastElement.focus()
          } else if (document.activeElement === btn) {
            e.preventDefault()
            lastElement.focus()
          }
        } else {
          // Tab: going forwards
          if (document.activeElement === lastElement) {
            e.preventDefault()
            firstElement.focus()
          }
        }
      }
    }

    document.addEventListener('keydown', focusTrapHandler)
  }

  function removeFocusTrap() {
    if (focusTrapHandler) {
      document.removeEventListener('keydown', focusTrapHandler)
      focusTrapHandler = null
    }
  }

  // Handle escape key for hamburger menu
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const nav = document.getElementById('hamburger-nav')
      if (nav && !nav.hasAttribute('hidden')) {
        closeHamburgerMenu()
      }
    }
  })

  // Tabs functionality
  function selectTab(tabNumber: number) {
    // Update tab states
    for (let i = 1; i <= 3; i++) {
      const tab = document.getElementById(`tab-${i}`)
      const panel = document.getElementById(`panel-${i}`)

      if (tab && panel) {
        if (i === tabNumber) {
          tab.setAttribute('aria-selected', 'true')
          tab.classList.add('tab-active')
          panel.removeAttribute('hidden')
        } else {
          tab.setAttribute('aria-selected', 'false')
          tab.classList.remove('tab-active')
          panel.setAttribute('hidden', '')
        }
      }
    }
  }

  // Make selectTab function global
  window.selectTab = selectTab

  // Handle keyboard navigation for tabs
  document.addEventListener('keydown', (e) => {
    const activeTab = document.querySelector(
      '[role="tab"][aria-selected="true"]'
    )
    if (
      document.activeElement &&
      document.activeElement.getAttribute('role') === 'tab'
    ) {
      let targetTab: Element | null = null

      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault()
          targetTab = document.activeElement.previousElementSibling
          break
        case 'ArrowRight':
          e.preventDefault()
          targetTab = document.activeElement.nextElementSibling
          break
        case 'Home':
          e.preventDefault()
          targetTab = document.querySelector('[role="tab"]')
          break
        case 'End':
          e.preventDefault()
          const tabs = document.querySelectorAll('[role="tab"]')
          targetTab = tabs[tabs.length - 1]
          break
      }

      if (targetTab) {
        ;(targetTab as HTMLElement).focus()
        const tabNumber = parseInt((targetTab as HTMLElement).id.split('-')[1])
        selectTab(tabNumber)
      }
    }
  })

  // Initialize components
  document.addEventListener('DOMContentLoaded', () => {
    updateSlide()
    setupAccessibleModal()
    setupBadTabOrderDemo()
    setupEmailDemo()
  })

  // Modal focus trapping demo
  function setupAccessibleModal() {
    const modal = document.getElementById('accessible-modal')
    if (!modal) return

    const focusableElements = modal.querySelectorAll(
      'input, button, [tabindex]:not([tabindex="-1"])'
    ) as NodeListOf<HTMLElement>

    const firstElement = focusableElements[0]
    const lastElement = focusableElements[focusableElements.length - 1]

    // Trap focus within the modal
    modal.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Tab') {
        if (e.shiftKey) {
          // Shift + Tab: going backwards
          if (document.activeElement === firstElement) {
            e.preventDefault()
            lastElement.focus()
          }
        } else {
          // Tab: going forwards
          if (document.activeElement === lastElement) {
            e.preventDefault()
            firstElement.focus()
          }
        }
      }
    })

    // Optional: Focus first element when modal area is clicked
    modal.addEventListener('click', (e) => {
      if (
        e.target === modal ||
        (e.target as HTMLElement).classList.contains('modal-overlay')
      ) {
        firstElement.focus()
      }
    })
  }

  // Bad tab order demo focus trap
  function setupBadTabOrderDemo() {
    const container = document.getElementById('bad-tab-demo')
    if (!container) return

    const buttons = container.querySelectorAll(
      '.tab-demo'
    ) as NodeListOf<HTMLButtonElement>

    // Create ordered array based on tabindex values for the confusing sequence
    const orderedButtons = Array.from(buttons).sort((a, b) => {
      const tabIndexA = parseInt(a.getAttribute('tabindex') || '0')
      const tabIndexB = parseInt(b.getAttribute('tabindex') || '0')
      return tabIndexA - tabIndexB
    })

    // Add focus trap
    container.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Tab') {
        e.preventDefault()

        const currentElement = document.activeElement as HTMLButtonElement
        const currentIndex = orderedButtons.indexOf(currentElement)

        if (currentIndex !== -1) {
          let nextIndex

          if (e.shiftKey) {
            // Shift+Tab: go backwards in the confusing order
            nextIndex =
              currentIndex === 0 ? orderedButtons.length - 1 : currentIndex - 1
          } else {
            // Tab: go forwards in the confusing order
            nextIndex =
              currentIndex === orderedButtons.length - 1 ? 0 : currentIndex + 1
          }

          orderedButtons[nextIndex].focus()
        }
      }
    })

    // Also trap clicks to ensure focus stays within
    buttons.forEach((button) => {
      button.addEventListener('click', () => {
        button.focus()
      })
    })
  }

  // Email demo focus trap
  function setupEmailDemo() {
    const container = document.getElementById('email-demo')
    if (!container) return

    const focusableElements = container.querySelectorAll(
      'button, [tabindex]:not([tabindex="-1"])'
    ) as NodeListOf<HTMLElement>

    // Create ordered array based on tabindex values
    const orderedElements = Array.from(focusableElements).sort((a, b) => {
      const tabIndexA = parseInt(a.getAttribute('tabindex') || '0')
      const tabIndexB = parseInt(b.getAttribute('tabindex') || '0')
      return tabIndexA - tabIndexB
    })

    // Add focus trap
    container.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Tab') {
        e.preventDefault()

        const currentElement = document.activeElement as HTMLElement
        const currentIndex = orderedElements.indexOf(currentElement)

        if (currentIndex !== -1) {
          let nextIndex

          if (e.shiftKey) {
            // Shift+Tab: go backwards
            nextIndex =
              currentIndex === 0 ? orderedElements.length - 1 : currentIndex - 1
          } else {
            // Tab: go forwards
            nextIndex =
              currentIndex === orderedElements.length - 1 ? 0 : currentIndex + 1
          }

          orderedElements[nextIndex].focus()
        }
      }
    })

    // Handle clicks to ensure focus stays within
    focusableElements.forEach((element) => {
      element.addEventListener('click', () => {
        element.focus()
      })
    })
  }
</script>
